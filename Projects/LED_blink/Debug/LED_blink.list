
LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001790  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001984  08001984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  08001994  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  08001994  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000828b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000123b  00000000  00000000  000282c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003c0  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000338  00000000  00000000  000298c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001f89  00000000  00000000  00029c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a7a  00000000  00000000  0002bb89  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d603  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d68  00000000  00000000  0002d680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001940 	.word	0x08001940

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001940 	.word	0x08001940

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f92b 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f806 	bl	8000534 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f001 f930 	bl	800178c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f937 	bl	80007c6 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f90d 	bl	800078e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_GetTick+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028

080005d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff ffee 	bl	80005bc <HAL_GetTick>
 80005e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d005      	beq.n	80005fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_Delay+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005fa:	bf00      	nop
 80005fc:	f7ff ffde 	bl	80005bc <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f7      	bcc.n	80005fc <HAL_Delay+0x28>
  {
  }
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000004 	.word	0x20000004

08000618 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <NVIC_SetPriorityGrouping+0x40>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <NVIC_SetPriorityGrouping+0x44>)
 8000642:	4313      	orrs	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <NVIC_SetPriorityGrouping+0x40>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	05fa0000 	.word	0x05fa0000

08000660 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	da0b      	bge.n	80006a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	490d      	ldr	r1, [pc, #52]	; (80006c8 <NVIC_SetPriority+0x4c>)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	3b04      	subs	r3, #4
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a6:	e009      	b.n	80006bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	4908      	ldr	r1, [pc, #32]	; (80006cc <NVIC_SetPriority+0x50>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	2201      	movs	r2, #1
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	401a      	ands	r2, r3
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000716:	2101      	movs	r1, #1
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	1e59      	subs	r1, r3, #1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff90 	bl	800067c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff49 	bl	8000618 <NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff5e 	bl	8000660 <NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff90 	bl	80006d0 <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5f 	bl	800067c <NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffb0 	bl	8000734 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800081c:	f000 f802 	bl	8000824 <HAL_SYSTICK_Callback>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	e175      	b.n	8000b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000854:	2201      	movs	r2, #1
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	429a      	cmp	r2, r3
 800086e:	f040 8164 	bne.w	8000b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d003      	beq.n	8000882 <HAL_GPIO_Init+0x4e>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b12      	cmp	r3, #18
 8000880:	d123      	bne.n	80008ca <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	08da      	lsrs	r2, r3, #3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	220f      	movs	r2, #15
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3208      	adds	r2, #8
 80008c4:	69b9      	ldr	r1, [r7, #24]
 80008c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4013      	ands	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 0203 	and.w	r2, r3, #3
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00b      	beq.n	800091e <HAL_GPIO_Init+0xea>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d007      	beq.n	800091e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000912:	2b11      	cmp	r3, #17
 8000914:	d003      	beq.n	800091e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b12      	cmp	r3, #18
 800091c:	d130      	bne.n	8000980 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4013      	ands	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4313      	orrs	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000954:	2201      	movs	r2, #1
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	091b      	lsrs	r3, r3, #4
 800096a:	f003 0201 	and.w	r2, r3, #1
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f000 80be 	beq.w	8000b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4a65      	ldr	r2, [pc, #404]	; (8000b54 <HAL_GPIO_Init+0x320>)
 80009c0:	4b64      	ldr	r3, [pc, #400]	; (8000b54 <HAL_GPIO_Init+0x320>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b62      	ldr	r3, [pc, #392]	; (8000b54 <HAL_GPIO_Init+0x320>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009d6:	4a60      	ldr	r2, [pc, #384]	; (8000b58 <HAL_GPIO_Init+0x324>)
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a57      	ldr	r2, [pc, #348]	; (8000b5c <HAL_GPIO_Init+0x328>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d037      	beq.n	8000a72 <HAL_GPIO_Init+0x23e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <HAL_GPIO_Init+0x32c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d031      	beq.n	8000a6e <HAL_GPIO_Init+0x23a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <HAL_GPIO_Init+0x330>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d02b      	beq.n	8000a6a <HAL_GPIO_Init+0x236>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a54      	ldr	r2, [pc, #336]	; (8000b68 <HAL_GPIO_Init+0x334>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d025      	beq.n	8000a66 <HAL_GPIO_Init+0x232>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <HAL_GPIO_Init+0x338>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d01f      	beq.n	8000a62 <HAL_GPIO_Init+0x22e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a52      	ldr	r2, [pc, #328]	; (8000b70 <HAL_GPIO_Init+0x33c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d019      	beq.n	8000a5e <HAL_GPIO_Init+0x22a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <HAL_GPIO_Init+0x340>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0x226>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <HAL_GPIO_Init+0x344>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d00d      	beq.n	8000a56 <HAL_GPIO_Init+0x222>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <HAL_GPIO_Init+0x348>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d007      	beq.n	8000a52 <HAL_GPIO_Init+0x21e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <HAL_GPIO_Init+0x34c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_GPIO_Init+0x21a>
 8000a4a:	2309      	movs	r3, #9
 8000a4c:	e012      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a4e:	230a      	movs	r3, #10
 8000a50:	e010      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a52:	2308      	movs	r3, #8
 8000a54:	e00e      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a56:	2307      	movs	r3, #7
 8000a58:	e00c      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	e00a      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a5e:	2305      	movs	r3, #5
 8000a60:	e008      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x240>
 8000a72:	2300      	movs	r3, #0
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	f002 0203 	and.w	r2, r2, #3
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a84:	4934      	ldr	r1, [pc, #208]	; (8000b58 <HAL_GPIO_Init+0x324>)
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000abc:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae0:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_GPIO_Init+0x350>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	f67f ae86 	bls.w	8000854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3724      	adds	r7, #36	; 0x24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40021c00 	.word	0x40021c00
 8000b7c:	40022000 	.word	0x40022000
 8000b80:	40022400 	.word	0x40022400
 8000b84:	40013c00 	.word	0x40013c00

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	405a      	eors	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	615a      	str	r2, [r3, #20]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e25c      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8087 	beq.w	8000d12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c04:	4b96      	ldr	r3, [pc, #600]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d00c      	beq.n	8000c2a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c10:	4b93      	ldr	r3, [pc, #588]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d112      	bne.n	8000c42 <HAL_RCC_OscConfig+0x62>
 8000c1c:	4b90      	ldr	r3, [pc, #576]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c28:	d10b      	bne.n	8000c42 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2a:	4b8d      	ldr	r3, [pc, #564]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d06c      	beq.n	8000d10 <HAL_RCC_OscConfig+0x130>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d168      	bne.n	8000d10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e236      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4a:	d106      	bne.n	8000c5a <HAL_RCC_OscConfig+0x7a>
 8000c4c:	4a84      	ldr	r2, [pc, #528]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c4e:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e02e      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd8>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x9c>
 8000c62:	4a7f      	ldr	r2, [pc, #508]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c64:	4b7e      	ldr	r3, [pc, #504]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4a7c      	ldr	r2, [pc, #496]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c70:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e01d      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd8>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0xc0>
 8000c86:	4a76      	ldr	r2, [pc, #472]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c88:	4b75      	ldr	r3, [pc, #468]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4a73      	ldr	r2, [pc, #460]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c94:	4b72      	ldr	r3, [pc, #456]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd8>
 8000ca0:	4a6f      	ldr	r2, [pc, #444]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000ca2:	4b6f      	ldr	r3, [pc, #444]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4a6c      	ldr	r2, [pc, #432]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cae:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d013      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fc7c 	bl	80005bc <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fc78 	bl	80005bc <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e1ea      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b61      	ldr	r3, [pc, #388]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f0      	beq.n	8000cc8 <HAL_RCC_OscConfig+0xe8>
 8000ce6:	e014      	b.n	8000d12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fc68 	bl	80005bc <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fc64 	bl	80005bc <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e1d6      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x110>
 8000d0e:	e000      	b.n	8000d12 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d069      	beq.n	8000df2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1e:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d2a:	4b4d      	ldr	r3, [pc, #308]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d11c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x190>
 8000d36:	4b4a      	ldr	r3, [pc, #296]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d116      	bne.n	8000d70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1aa      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4941      	ldr	r1, [pc, #260]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	e040      	b.n	8000df2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d023      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d78:	4a39      	ldr	r2, [pc, #228]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc1a 	bl	80005bc <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc16 	bl	80005bc <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e188      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	492d      	ldr	r1, [pc, #180]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
 8000dbe:	e018      	b.n	8000df2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fbf6 	bl	80005bc <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fbf2 	bl	80005bc <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e164      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d038      	beq.n	8000e70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d019      	beq.n	8000e3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbd3 	bl	80005bc <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fbcf 	bl	80005bc <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e141      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0f0      	beq.n	8000e1a <HAL_RCC_OscConfig+0x23a>
 8000e38:	e01a      	b.n	8000e70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e46:	f7ff fbb9 	bl	80005bc <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	e00a      	b.n	8000e64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fbb5 	bl	80005bc <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d903      	bls.n	8000e64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e127      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
 8000e60:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	4b94      	ldr	r3, [pc, #592]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1ee      	bne.n	8000e4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80a4 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7e:	4b8e      	ldr	r3, [pc, #568]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4a8b      	ldr	r2, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000e8c:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ea6:	4b85      	ldr	r3, [pc, #532]	; (80010bc <HAL_RCC_OscConfig+0x4dc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d118      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000eb2:	4a82      	ldr	r2, [pc, #520]	; (80010bc <HAL_RCC_OscConfig+0x4dc>)
 8000eb4:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_RCC_OscConfig+0x4dc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fb7d 	bl	80005bc <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ec6:	f7ff fb79 	bl	80005bc <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0eb      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed8:	4b78      	ldr	r3, [pc, #480]	; (80010bc <HAL_RCC_OscConfig+0x4dc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x31a>
 8000eec:	4a72      	ldr	r2, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	4b72      	ldr	r3, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef8:	e02d      	b.n	8000f56 <HAL_RCC_OscConfig+0x376>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x33c>
 8000f02:	4a6d      	ldr	r2, [pc, #436]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	4b6c      	ldr	r3, [pc, #432]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f0e:	4a6a      	ldr	r2, [pc, #424]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f10:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6713      	str	r3, [r2, #112]	; 0x70
 8000f1a:	e01c      	b.n	8000f56 <HAL_RCC_OscConfig+0x376>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d10c      	bne.n	8000f3e <HAL_RCC_OscConfig+0x35e>
 8000f24:	4a64      	ldr	r2, [pc, #400]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f26:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f30:	4a61      	ldr	r2, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3c:	e00b      	b.n	8000f56 <HAL_RCC_OscConfig+0x376>
 8000f3e:	4a5e      	ldr	r2, [pc, #376]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6713      	str	r3, [r2, #112]	; 0x70
 8000f4a:	4a5b      	ldr	r2, [pc, #364]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d015      	beq.n	8000f8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb2d 	bl	80005bc <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb29 	bl	80005bc <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e099      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0ee      	beq.n	8000f66 <HAL_RCC_OscConfig+0x386>
 8000f88:	e014      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb17 	bl	80005bc <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb13 	bl	80005bc <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e083      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1ee      	bne.n	8000f92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d105      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d06f      	beq.n	80010ae <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d067      	beq.n	80010aa <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d149      	bne.n	8001076 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe2:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fee:	f7ff fae5 	bl	80005bc <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff fae1 	bl	80005bc <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e053      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f0      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001014:	4928      	ldr	r1, [pc, #160]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	085b      	lsrs	r3, r3, #1
 800102e:	3b01      	subs	r3, #1
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	4313      	orrs	r3, r2
 800103c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001040:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800104c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fab5 	bl	80005bc <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff fab1 	bl	80005bc <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e023      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x476>
 8001074:	e01b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fa9b 	bl	80005bc <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff fa97 	bl	80005bc <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e009      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_RCC_OscConfig+0x4d8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x4aa>
 80010a8:	e001      	b.n	80010ae <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0ce      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b69      	ldr	r3, [pc, #420]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 020f 	and.w	r2, r3, #15
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d210      	bcs.n	8001108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4966      	ldr	r1, [pc, #408]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	4b65      	ldr	r3, [pc, #404]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 020f 	bic.w	r2, r3, #15
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 020f 	and.w	r2, r3, #15
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b6      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800112a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4b52      	ldr	r3, [pc, #328]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	494f      	ldr	r1, [pc, #316]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d040      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d115      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07d      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e071      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e069      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4938      	ldr	r1, [pc, #224]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	4b37      	ldr	r3, [pc, #220]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 0203 	bic.w	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa02 	bl	80005bc <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff f9fe 	bl	80005bc <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e051      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 020f 	and.w	r2, r3, #15
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d910      	bls.n	8001214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4923      	ldr	r1, [pc, #140]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 020f 	bic.w	r2, r3, #15
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 020f 	and.w	r2, r3, #15
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e030      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4918      	ldr	r1, [pc, #96]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123e:	4911      	ldr	r1, [pc, #68]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f81d 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 8001256:	4601      	mov	r1, r0
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1c8>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	fa21 f303 	lsr.w	r3, r1, r3
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_RCC_ClockConfig+0x1cc>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff f960 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00
 8001284:	40023800 	.word	0x40023800
 8001288:	08001968 	.word	0x08001968
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001294:	b08f      	sub	sp, #60	; 0x3c
 8001296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a8:	4b62      	ldr	r3, [pc, #392]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b04      	cmp	r3, #4
 80012b2:	d007      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x34>
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d008      	beq.n	80012ca <HAL_RCC_GetSysClockFreq+0x3a>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f040 80b2 	bne.w	8001422 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012be:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012c2:	e0b1      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c4:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012c8:	e0ae      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012d4:	4b57      	ldr	r3, [pc, #348]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d04e      	beq.n	800137e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	f04f 0400 	mov.w	r4, #0
 80012ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	ea01 0103 	and.w	r1, r1, r3
 80012f6:	ea02 0204 	and.w	r2, r2, r4
 80012fa:	460b      	mov	r3, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	0160      	lsls	r0, r4, #5
 8001300:	6278      	str	r0, [r7, #36]	; 0x24
 8001302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001304:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001308:	6278      	str	r0, [r7, #36]	; 0x24
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001312:	1a5b      	subs	r3, r3, r1
 8001314:	eb64 0402 	sbc.w	r4, r4, r2
 8001318:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800131c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001320:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001324:	ebb8 0803 	subs.w	r8, r8, r3
 8001328:	eb69 0904 	sbc.w	r9, r9, r4
 800132c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001344:	eb18 0801 	adds.w	r8, r8, r1
 8001348:	eb49 0902 	adc.w	r9, r9, r2
 800134c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001364:	4640      	mov	r0, r8
 8001366:	4649      	mov	r1, r9
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	f04f 0400 	mov.w	r4, #0
 800136e:	461a      	mov	r2, r3
 8001370:	4623      	mov	r3, r4
 8001372:	f7fe ff49 	bl	8000208 <__aeabi_uldivmod>
 8001376:	4603      	mov	r3, r0
 8001378:	460c      	mov	r4, r1
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
 800137c:	e043      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	f04f 0400 	mov.w	r4, #0
 8001388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	ea01 0103 	and.w	r1, r1, r3
 8001394:	ea02 0204 	and.w	r2, r2, r4
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	0160      	lsls	r0, r4, #5
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013b0:	1a5b      	subs	r3, r3, r1
 80013b2:	eb64 0402 	sbc.w	r4, r4, r2
 80013b6:	01a6      	lsls	r6, r4, #6
 80013b8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013bc:	019d      	lsls	r5, r3, #6
 80013be:	1aed      	subs	r5, r5, r3
 80013c0:	eb66 0604 	sbc.w	r6, r6, r4
 80013c4:	00f3      	lsls	r3, r6, #3
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	00eb      	lsls	r3, r5, #3
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80013d8:	186d      	adds	r5, r5, r1
 80013da:	eb46 0602 	adc.w	r6, r6, r2
 80013de:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80013e2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80013e6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80013ea:	4655      	mov	r5, sl
 80013ec:	465e      	mov	r6, fp
 80013ee:	4628      	mov	r0, r5
 80013f0:	4631      	mov	r1, r6
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	f04f 0400 	mov.w	r4, #0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	f7fe ff04 	bl	8000208 <__aeabi_uldivmod>
 8001400:	4603      	mov	r3, r0
 8001402:	460c      	mov	r4, r1
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0c1b      	lsrs	r3, r3, #16
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	3301      	adds	r3, #1
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001420:	e002      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001426:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800142a:	4618      	mov	r0, r3
 800142c:	373c      	adds	r7, #60	; 0x3c
 800142e:	46bd      	mov	sp, r7
 8001430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200

08001440 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_RCC_GetHCLKFreq+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f7ff f85c 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f816 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 f87c 	bl	8001560 <MX_GPIO_Init>
		 * LD3 : Red	: PB14
		 *
		 * LED is ON when IO is HIGH
		 */
		//Toggle PB7
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8001468:	2101      	movs	r1, #1
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <main+0x34>)
 800146c:	f7ff fba5 	bl	8000bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <main+0x34>)
 8001474:	f7ff fba1 	bl	8000bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <main+0x34>)
 800147e:	f7ff fb9c 	bl	8000bba <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001486:	f7ff f8a5 	bl	80005d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800148a:	e7ed      	b.n	8001468 <main+0x10>
 800148c:	40020400 	.word	0x40020400

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	; 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <SystemClock_Config+0xc0>)
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <SystemClock_Config+0xc0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <SystemClock_Config+0xc0>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <SystemClock_Config+0xc4>)
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <SystemClock_Config+0xc4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <SystemClock_Config+0xc4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb7e 	bl	8000be0 <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <SystemClock_Config+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80014ea:	2197      	movs	r1, #151	; 0x97
 80014ec:	481a      	ldr	r0, [pc, #104]	; (8001558 <SystemClock_Config+0xc8>)
 80014ee:	f000 f947 	bl	8001780 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdd6 	bl	80010c0 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <SystemClock_Config+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 800151a:	21a5      	movs	r1, #165	; 0xa5
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <SystemClock_Config+0xc8>)
 800151e:	f000 f92f 	bl	8001780 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001522:	f7ff ff8d 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001526:	4602      	mov	r2, r0
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <SystemClock_Config+0xcc>)
 800152a:	fba3 2302 	umull	r2, r3, r3, r2
 800152e:	099b      	lsrs	r3, r3, #6
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f948 	bl	80007c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001536:	2004      	movs	r0, #4
 8001538:	f7ff f952 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff f923 	bl	800078e <HAL_NVIC_SetPriority>
}
 8001548:	bf00      	nop
 800154a:	3750      	adds	r7, #80	; 0x50
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000
 8001558:	08001958 	.word	0x08001958
 800155c:	10624dd3 	.word	0x10624dd3

08001560 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4a7f      	ldr	r2, [pc, #508]	; (8001764 <MX_GPIO_Init+0x204>)
 8001568:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <MX_GPIO_Init+0x204>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <MX_GPIO_Init+0x204>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	4a79      	ldr	r2, [pc, #484]	; (8001764 <MX_GPIO_Init+0x204>)
 8001580:	4b78      	ldr	r3, [pc, #480]	; (8001764 <MX_GPIO_Init+0x204>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <MX_GPIO_Init+0x204>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4a73      	ldr	r2, [pc, #460]	; (8001764 <MX_GPIO_Init+0x204>)
 8001598:	4b72      	ldr	r3, [pc, #456]	; (8001764 <MX_GPIO_Init+0x204>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <MX_GPIO_Init+0x204>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <MX_GPIO_Init+0x204>)
 80015b0:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <MX_GPIO_Init+0x204>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <MX_GPIO_Init+0x204>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	4a67      	ldr	r2, [pc, #412]	; (8001764 <MX_GPIO_Init+0x204>)
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <MX_GPIO_Init+0x204>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <MX_GPIO_Init+0x204>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015de:	4a61      	ldr	r2, [pc, #388]	; (8001764 <MX_GPIO_Init+0x204>)
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <MX_GPIO_Init+0x204>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <MX_GPIO_Init+0x204>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80015fc:	485a      	ldr	r0, [pc, #360]	; (8001768 <MX_GPIO_Init+0x208>)
 80015fe:	f7ff fac3 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4859      	ldr	r0, [pc, #356]	; (800176c <MX_GPIO_Init+0x20c>)
 8001608:	f7ff fabe 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	4b57      	ldr	r3, [pc, #348]	; (8001770 <MX_GPIO_Init+0x210>)
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4854      	ldr	r0, [pc, #336]	; (8001774 <MX_GPIO_Init+0x214>)
 8001622:	f7ff f907 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001626:	2332      	movs	r3, #50	; 0x32
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001636:	230b      	movs	r3, #11
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	484c      	ldr	r0, [pc, #304]	; (8001774 <MX_GPIO_Init+0x214>)
 8001642:	f7ff f8f7 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001646:	2386      	movs	r3, #134	; 0x86
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001656:	230b      	movs	r3, #11
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4845      	ldr	r0, [pc, #276]	; (8001778 <MX_GPIO_Init+0x218>)
 8001662:	f7ff f8e7 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001666:	f244 0381 	movw	r3, #16513	; 0x4081
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <MX_GPIO_Init+0x208>)
 8001680:	f7ff f8d8 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001696:	230b      	movs	r3, #11
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_GPIO_Init+0x208>)
 80016a2:	f7ff f8c7 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b8:	2307      	movs	r3, #7
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	482e      	ldr	r0, [pc, #184]	; (800177c <MX_GPIO_Init+0x21c>)
 80016c4:	f7ff f8b6 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4823      	ldr	r0, [pc, #140]	; (800176c <MX_GPIO_Init+0x20c>)
 80016e0:	f7ff f8a8 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	481d      	ldr	r0, [pc, #116]	; (800176c <MX_GPIO_Init+0x20c>)
 80016f8:	f7ff f89c 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800170e:	230a      	movs	r3, #10
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <MX_GPIO_Init+0x218>)
 800171a:	f7ff f88b 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800171e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <MX_GPIO_Init+0x218>)
 8001734:	f7ff f87e 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001738:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174a:	230b      	movs	r3, #11
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_GPIO_Init+0x20c>)
 8001756:	f7ff f86d 	bl	8000834 <HAL_GPIO_Init>

}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	; 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400
 800176c:	40021800 	.word	0x40021800
 8001770:	10110000 	.word	0x10110000
 8001774:	40020800 	.word	0x40020800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020c00 	.word	0x40020c00

08001780 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800178a:	e7fe      	b.n	800178a <_Error_Handler+0xa>

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_MspInit+0x98>)
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_MspInit+0x98>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_MspInit+0x98>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <HAL_MspInit+0x98>)
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_MspInit+0x98>)
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_MspInit+0x98>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c2:	2003      	movs	r0, #3
 80017c4:	f7fe ffd8 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	f06f 000b 	mvn.w	r0, #11
 80017d0:	f7fe ffdd 	bl	800078e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	f06f 000a 	mvn.w	r0, #10
 80017dc:	f7fe ffd7 	bl	800078e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	f06f 0009 	mvn.w	r0, #9
 80017e8:	f7fe ffd1 	bl	800078e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	f06f 0004 	mvn.w	r0, #4
 80017f4:	f7fe ffcb 	bl	800078e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	f06f 0003 	mvn.w	r0, #3
 8001800:	f7fe ffc5 	bl	800078e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	f06f 0001 	mvn.w	r0, #1
 800180c:	f7fe ffbf 	bl	800078e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7fe ffb9 	bl	800078e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800

08001828 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f7fe feb2 	bl	8000594 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001830:	f7fe fff2 	bl	8000818 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <SystemInit+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <SystemInit+0x5c>)
 8001840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <SystemInit+0x60>)
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <SystemInit+0x60>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <SystemInit+0x60>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800185e:	490e      	ldr	r1, [pc, #56]	; (8001898 <SystemInit+0x60>)
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <SystemInit+0x60>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <SystemInit+0x64>)
 8001866:	4013      	ands	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <SystemInit+0x60>)
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <SystemInit+0x68>)
 800186e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <SystemInit+0x60>)
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <SystemInit+0x60>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x60>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SystemInit+0x5c>)
 8001884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001888:	609a      	str	r2, [r3, #8]
#endif
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	40023800 	.word	0x40023800
 800189c:	fef6ffff 	.word	0xfef6ffff
 80018a0:	24003010 	.word	0x24003010

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
  ldr  r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffb3 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f000 f811 	bl	80018f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7ff fdbf 	bl	8001458 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80018e0:	08001988 	.word	0x08001988
  ldr  r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80018f0:	2000002c 	.word	0x2000002c

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <__libc_init_array>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	4e0d      	ldr	r6, [pc, #52]	; (8001930 <__libc_init_array+0x38>)
 80018fc:	4c0d      	ldr	r4, [pc, #52]	; (8001934 <__libc_init_array+0x3c>)
 80018fe:	1ba4      	subs	r4, r4, r6
 8001900:	10a4      	asrs	r4, r4, #2
 8001902:	2500      	movs	r5, #0
 8001904:	42a5      	cmp	r5, r4
 8001906:	d109      	bne.n	800191c <__libc_init_array+0x24>
 8001908:	4e0b      	ldr	r6, [pc, #44]	; (8001938 <__libc_init_array+0x40>)
 800190a:	4c0c      	ldr	r4, [pc, #48]	; (800193c <__libc_init_array+0x44>)
 800190c:	f000 f818 	bl	8001940 <_init>
 8001910:	1ba4      	subs	r4, r4, r6
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	2500      	movs	r5, #0
 8001916:	42a5      	cmp	r5, r4
 8001918:	d105      	bne.n	8001926 <__libc_init_array+0x2e>
 800191a:	bd70      	pop	{r4, r5, r6, pc}
 800191c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001920:	4798      	blx	r3
 8001922:	3501      	adds	r5, #1
 8001924:	e7ee      	b.n	8001904 <__libc_init_array+0xc>
 8001926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800192a:	4798      	blx	r3
 800192c:	3501      	adds	r5, #1
 800192e:	e7f2      	b.n	8001916 <__libc_init_array+0x1e>
 8001930:	08001980 	.word	0x08001980
 8001934:	08001980 	.word	0x08001980
 8001938:	08001980 	.word	0x08001980
 800193c:	08001984 	.word	0x08001984

08001940 <_init>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	bf00      	nop
 8001944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001946:	bc08      	pop	{r3}
 8001948:	469e      	mov	lr, r3
 800194a:	4770      	bx	lr

0800194c <_fini>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	bf00      	nop
 8001950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001952:	bc08      	pop	{r3}
 8001954:	469e      	mov	lr, r3
 8001956:	4770      	bx	lr
